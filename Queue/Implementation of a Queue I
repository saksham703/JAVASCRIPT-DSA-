class Queue {
    constructor() {
        this.items = [];
    }

    // Add an item to the end of the queue
    enqueue(element) {
        this.items.push(element);
    }

    // Remove and return the front item of the queue
    dequeue() {
        if (this.isEmpty()) {
            throw new Error("Queue is empty");
        }
        return this.items.shift();
    }

    // Return the front item without removing it
    front() {
        if (this.isEmpty()) {
            throw new Error("Queue is empty");
        }
        return this.items[0];
    }

    // Check if the queue is empty
    isEmpty() {
        return this.items.length === 0;
    }

    // Return the size of the queue
    size() {
        return this.items.length;
    }

    // Print the queue
    print() {
        console.log(this.items.toString());
    }
}

// Usage
const queue = new Queue();
queue.enqueue(1);
queue.enqueue(2);
queue.enqueue(3);
console.log(queue.front()); // Output: 1
queue.dequeue();
queue.print(); // Output: 2,3
