// Javascript program to implement LRU Least Recently Used)
// using Built-in Doubly linked list

class LRUCache {
    constructor(capacity) {
        this.capacity = capacity;
        this.cache = new Map();
    }

    // Get the value for a given key
    get(key) {
        if (!this.cache.has(key)) {
            return -1;
        }

        // Move the accessed key-value pair
        // to the end to mark it as recently used
        const value = this.cache.get(key);
        this.cache.delete(key);
        this.cache.set(key, value);
        return value;
    }

    // Put a key-value pair into the cache
    put(key, value) {
        if (this.cache.has(key)) {
        
            // Update the value and move the key to the end
            this.cache.delete(key);
        }
        else if (this.cache.size >= this.capacity) {
        
            // Remove the least recently used item (the
            // first item in the Map)
            this.cache.delete(this.cache.keys().next().value);
        }

        // Add the new key-value pair
        this.cache.set(key, value);
    }
}

const cache = new LRUCache(2);
cache.put(1, 1);
cache.put(2, 2);
console.log(cache.get(1));
cache.put(3, 3);
console.log(cache.get(2));
cache.put(4, 4);
console.log(cache.get(1));
console.log(cache.get(3));
console.log(cache.get(4));
