
class PQ {
    constructor() {
        this.data = [];
    }

    push(item) {
        this.data.push(item);
        this.data.sort((a, b) => a[0] - b[0]); // Sort by distance
    }

    pop() {
        return this.data.shift(); // Remove and return the item with the smallest distance
    }

    size() {
        return this.data.length;
    }
}

// Function to construct adjacency 
function constructAdj(edges, V) {
    // adj[u] = list of [v, wt]
    const adj = Array.from({ length: V }, () => []);

    for (const edge of edges) {
        const [u, v, wt] = edge;
        adj[u].push([v, wt]);
        adj[v].push([u, wt]); 
    }

    return adj;
}

// Returns shortest distances from src to all other vertices
function dijkstra(V, edges, src) {
    
    // Create adjacency list
    const adj = constructAdj(edges, V);

    // Create a min heap to store <distance, node>
    const pq = new PQ();

    // Create an array for distances and initialize all distances as infinity
    const dist = Array(V).fill(Infinity);

    // Push the source node with distance 0
     pq.push([0, src]);
    dist[src] = 0;

    // Process the heap
    while (pq.size() > 0) {
        const [d, node] = pq.pop();

        // Traverse all adjacent of u
        for (const [neighbour , weight] of adj[node]) {
            if (dist[neighbour] > dist[node] + weight) {
                dist[neighbour] = dist[node] + weight;
                pq.push([dist[neighbour], neighbour]);
            }
        }
    }

    return dist;
}

// Driver code
const V = 5;
const src = 0;

// edge list format: [u, v, weight]
const edges = 0, 1, 4], [0, 2, 8], [1, 4, 6], [2, 3, 2], [3, 4, 10;

const result = dijkstra(V, edges, src);

// Print shortest distances in one line
console.log(result.join(' '));


// TC normally : O((V + E) log V) , SC : O(V)
// In this cases : TC:- O((V + E) * n log n)
