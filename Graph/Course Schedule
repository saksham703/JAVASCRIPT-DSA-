// BFS - TOPOLOGICAL SORT - KAHN'S ALGORITHM 

function canFinish(numCourses, prerequisites) {
  const inDegree = new Array(numCourses).fill(0);
  const graph = new Array(numCourses).fill(0).map(() => []);

  // Build the graph and in-degree array
  for (const [course, prereq] of prerequisites) {
    graph[prereq].push(course);
    inDegree[course]++;
  }

  const queue = [];

  // Enqueue courses with no prerequisites
  for (let i = 0; i < numCourses; i++) {
    if (inDegree[i] === 0) {
      queue.push(i);
    }
  }

  let count = 0; // number of courses that can be finished

  while (queue.length > 0) {
    const course = queue.shift();
    count++;

    // Reduce in-degree of courses dependent on the current course
    for (const nextCourse of graph[course]) {
      inDegree[nextCourse]--;
      if (inDegree[nextCourse] === 0) {
        queue.push(nextCourse);
      }
    }
  }

  // If count matches numCourses, no cycle exists and all courses can be finished
  return count === numCourses;
}

// Example usage:
const numCourses = 4;
const prerequisites = [[1,0],[2,1],[3,2]];

console.log(canFinish(numCourses, prerequisites)); // Output: true



// DFS - TOPOLOGICAL SORT 

// check if togoSort.length === graph.length then return true else false;


// DFS - 3rd Approach 



function canFinish(numCourses, prerequisites) {
  const graph = new Array(numCourses).fill(0).map(() => []);
  const visited = new Array(numCourses).fill(0); // 0: unvisited, 1: visiting, 2: visited
  const topoSort = [];

  // Build graph adjacency list
  for (const [course, prereq] of prerequisites) {
    graph[prereq].push(course);
  }

  // DFS function to detect cycles and build topo sort
  function dfs(node) {
    if (visited[node] === 1) {
      // Cycle detected
      return false;
    }
    if (visited[node] === 2) {
      // Already visited - safe
      return true;
    }

    visited[node] = 1; // Mark node as visiting

    for (const neighbor of graph[node]) {
      if (!dfs(neighbor)) {
        return false; // Cycle detected downstream
      }
    }

    visited[node] = 2; // Mark node as visited/completed
    topoSort.push(node); // Add to topo sort on recursion backtrack
    return true;
  }

  for (let i = 0; i  numCourses; i++) {
    if (visited[i] === 0) {
      if (!dfs(i)) {
        // Cycle detected - topological sort not possible
        return false;
      }
    }
  }

  // After DFS, topoSort array contains all nodes if no cycle
  return topoSort.length === numCourses;
}

// Example usage:
const numCourses = 4;
const prerequisites = [[1,0],[2,1],[3,2]];

console.log(canFinish(numCourses, prerequisites)); // Output: true
