// BFS - TOPOLOGICAL SORT - KAHN'S ALGORITHM 

function canFinish(numCourses, prerequisites) {
  const inDegree = new Array(numCourses).fill(0);
  const graph = new Array(numCourses).fill(0).map(() => []);

  // Build the graph and in-degree array
  for (const [course, prereq] of prerequisites) {
    graph[prereq].push(course);
    inDegree[course]++;
  }

  const queue = [];

  // Enqueue courses with no prerequisites
  for (let i = 0; i < numCourses; i++) {
    if (inDegree[i] === 0) {
      queue.push(i);
    }
  }

  let count = 0; // number of courses that can be finished

  while (queue.length > 0) {
    const course = queue.shift();
    count++;

    // Reduce in-degree of courses dependent on the current course
    for (const nextCourse of graph[course]) {
      inDegree[nextCourse]--;
      if (inDegree[nextCourse] === 0) {
        queue.push(nextCourse);
      }
    }
  }

  // If count matches numCourses, no cycle exists and all courses can be finished
  return count === numCourses;
}

// Example usage:
const numCourses = 4;
const prerequisites = [[1,0],[2,1],[3,2]];

console.log(canFinish(numCourses, prerequisites)); // Output: true



// DFS - TOPOLOGICAL SORT 

// check if togoSort.length === graph.length then return true else false;


// DFS - 3rd Approach 


var canFinish = function(numCourses, prerequisites) {
    // Create an adjacency list using an array
    const adj = new Array(numCourses).fill(0).map(() => []);
 // Replaces each 0 with a new empty array
    
    // Build the graph
    for (let [course, prereq] of prerequisites) {
        adj[prereq].push(course); // prereq -> course
    }

    const visited = new Array(numCourses).fill(false);
    const pathVisited  = new Array(numCourses).fill(false);

    function isCycleDFS(u) {
        visited[u] = true;
        pathVisited[u] = true;

        for (let v of adj[u]) {
            if (!visited[v]) {
                if (isCycleDFS(v)) return true;
            } else if (pathVisited[v]) {
                return true; // if node is already visited & visited in the current path then return true;
            }
        }

        pathVisited[u] = false;
        return false;
    }

    for (let i = 0; i < numCourses; i++) {
        if (!visited[i]) {
            if (isCycleDFS(i)) return false;
        }
    }

    return true;
};
