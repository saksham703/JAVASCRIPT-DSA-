
// DFS APPROACH 

function floodFill(image, sr, sc, color) {
    const originalColor = image[sr][sc];
    if (originalColor === color) {
        return image;
    }

    function dfs(row, col) {
        if (row < 0 || row >= image.length || col < 0 || col >= image[0].length || image[row][col] !== originalColor) {
            return;
        }

        image[row][col] = color;
        dfs(row + 1, col);
        dfs(row - 1, col);
        dfs(row, col + 1);
        dfs(row, col - 1);
    }

    dfs(sr, sc);
    return image;
}



// BFS APPROACH 


function floodFill(image, sr, sc, color) {
    const originalColor = image[sr][sc];
    if (originalColor === color) return image;

    const queue = [[sr, sc]];
    const directions = [[0,1], [1,0], [0,-1], [-1,0]];

    while (queue.length > 0) {
        const [r, c] = queue.shift();

        image[r][c] = color;

        for (const [dr, dc] of directions) {
            const nr = r + dr;
            const nc = c + dc;
            if (
                nr >= 0 && nr < image.length &&
                nc >= 0 && nc < image[0].length &&
                image[nr][nc] === originalColor
            ) {
                queue.push([nr, nc]);
            }
        }
    }

    return image;
}



TC:- O(N"M), SC:- O(N*M) STACK/QUEUE SPACE
