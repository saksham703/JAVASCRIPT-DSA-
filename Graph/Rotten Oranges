var orangesRotting = function(grid) {
    let rows = grid.length;
    let cols = grid[0].length;
    let queue = [];
    let freshOranges = 0;

    // Step 1: Count fresh oranges and enqueue all initially rotten ones
    for (let r = 0; r < rows; r++) {
        for (let c = 0; c < cols; c++) {
            if (grid[r][c] === 2) {
                queue.push([r, c]);
            } else if (grid[r][c] === 1) {
                freshOranges++;
            }
        }
    }

    if (freshOranges === 0) return 0; // No fresh oranges to rot

    let minutes = 0;
    let directions = [[0, 1], [1, 0], [0, -1], [-1, 0]];

    // Step 2: BFS to rot adjacent fresh oranges level by level (minute by minute)
    while (queue.length > 0) {
        let size = queue.length;

        for (let i = 0; i < size; i++) {
            let [x, y] = queue.shift();

            for (let [dx, dy] of directions) {
                let nx = x + dx;
                let ny = y + dy;

                if (
                    nx >= 0 && nx < rows &&
                    ny >= 0 && ny < cols &&
                    grid[nx][ny] === 1
                ) {
                    grid[nx][ny] = 2; // Rot the fresh orange
                    queue.push([nx, ny]);
                    freshOranges--;
                }
            }
        }

        if (queue.length !== 0) minutes++; // Only increment time if more oranges are left to process
  

    return freshOranges === 0 ? minutes : -1;
};

// TC:- O(m*n), traversing mat, SC:- O(m*n), queue can contain upto m*n oranges
// (in case all the oranges are rotten)/recursion stack can contain upto m*n oranges in case of all rotten.
