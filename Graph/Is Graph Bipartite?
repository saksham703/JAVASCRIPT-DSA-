// To determine if a graph is bipartite, you can use a BFS or DFS approach to color the graph using two colors.
// If you find two adjacent nodes with the same color, the graph is not bipartite. 



// BFS

function isBipartite(graph) {
  const n = graph.length;
  const color = new Array(n).fill(0); // 0: uncolored, 1: color1, -1: color2

  const bfs = (start) => {
    const queue = [start];
    color[start] = 1; // Start coloring with color 1

    while (queue.length > 0) {
      const node = queue.shift();

      for (const neighbor of graph[node]) {
        if (color[neighbor] === 0) {
          // If the neighbor is uncolored, color it with the opposite color
          color[neighbor] = -color[node];
          queue.push(neighbor);
        } else if (color[neighbor] === color[node]) {
          // If the neighbor has the same color, it's not bipartite
          return false;
        }
      }
    }
    return true;
  };

  for (let i = 0; i < n; i++) {
    if (color[i] === 0 && !bfs(i)) {
      return false; // If any component is not bipartite
    }
  }
  return true; // All components are bipartite
}

// Example usage:
const graph = [[1, 3], [0, 2], [1, 3], [0, 2]];
console.log(isBipartite(graph)); // Output: true


// DFS 


function isBipartite(graph) {
  const n = graph.length;
  const color = new Array(n).fill(0); // 0: uncolored, 1 and -1 are the two colors

  function dfs(node, c) {
    color[node] = c;

    for (const neighbor of graph[node]) {
      if (color[neighbor] === 0) {
        // If neighbor is not colored, recursively DFS with opposite color
        if (!dfs(neighbor, -c)) return false;
      } else if (color[neighbor] === c) {
        // If neighbor has the same color, graph is not bipartite
        return false;
      }
    }
    return true;
  }

  for (let i = 0; i < n; i++) {
    if (color[i] === 0 && !dfs(i, 1)) {
      return false;
    }
  }
  return true;
}

// Example usage:
const graph = [[1, 3], [0, 2], [1, 3], [0, 2]];
console.log(isBipartite(graph)); // Output: true


