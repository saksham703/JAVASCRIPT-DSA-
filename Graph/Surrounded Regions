// DFS

class Solution {
    public void solve(char[][] board) {
        if (board == null || board.length == 0) return;
        int row = board.length;
        int col = board[0].length;

        // Perform BFS/DFS from the boundary 'O's
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                if ((i == 0 || i == row - 1 || j == 0 || j == col - 1) && board[i][j] == 'O') {
                    dfs(board, i, j);
                }
            }
        }

        // Final traversal to flip 'O' to 'X' and '+' back to 'O'
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                if (board[i][j] == 'O') {
                    board[i][j] = 'X';
                } else if (board[i][j] == '+') {
                    board[i][j] = 'O';
                }
            }
        }
    }

    private void dfs(char[][] board, int i, int j) {
        if (i < 0 || j < 0 || i >= board.length || j >= board[0].length || board[i][j] != 'O') return;
        board[i][j] = '+';
        dfs(board, i + 1, j);
        dfs(board, i - 1, j);
        dfs(board, i, j - 1);
        dfs(board, i, j + 1);
    }
}


// BFS 


function solve(board) {
    if (!board || board.length === 0) return;
    const rows = board.length;
    const cols = board[0].length;
    const queue = [];

    // Helper function to add boundary 'O's to the queue
    function addBoundaryOs() {
        for (let r = 0; r < rows; r++) {
            for (let c = 0; c < cols; c++) {
                if ((r === 0 || r === rows - 1 || c === 0 || c === cols - 1) && board[r][c] === 'O') {
                    queue.push([r, c]);
                    board[r][c] = '+'; // mark visited/boundary-connected
                }
            }
        }
    }

    // Directions array for adjacent cells
    const directions = [[0,1], [1,0], [0,-1], [-1,0]];

    addBoundaryOs();

    // BFS traversal from boundary 'O's
    while (queue.length > 0) {
        const [r, c] = queue.shift();

        for (const [dr, dc] of directions) {
            const nr = r + dr;
            const nc = c + dc;

            if (nr >= 0 && nr < rows && nc >= 0 && nc < cols && board[nr][nc] === 'O') {
                board[nr][nc] = '+';
                queue.push([nr, nc]);
            }
        }
    }

    // Final pass to flip surrounded 'O's to 'X' and boundary-connected '+' back to 'O'
    for (let r = 0; r < rows; r++) {
        for (let c = 0; c < cols; c++) {
            if (board[r][c] === 'O') {
                board[r][c] = 'X';  // flip surrounded
            } else if (board[r][c] === '+') {
                board[r][c] = 'O';  // revert boundary-connected
            }
        }
    }
}
