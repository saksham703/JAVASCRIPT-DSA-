// DFS

function numIslands(grid) {
  if (!grid || grid.length === 0) return 0;

  const rows = grid.length;
  const cols = grid[0].length;

  // 8 directions (horizontal, vertical, diagonal)
  const directions = [
    [-1, 0],  // up
    [1, 0],   // down
    [0, -1],  // left
    [0, 1],   // right
    [-1, -1], // top-left
    [-1, 1],  // top-right
    [1, -1],  // bottom-left
    [1, 1]    // bottom-right
  ];

  let islandCount = 0;

  function dfs(r, c) {
    // Boundary and visited check
    if (
      r < 0 || r >= rows ||
      c < 0 || c >= cols ||
      grid[r][c] === '0'
    ) {
      return;
    }

    // Mark cell as visited by setting it to '0'
    grid[r][c] = '0';

    // Visit all 8 neighbors
    for (const [dr, dc] of directions) {
      dfs(r + dr, c + dc);
    }
  }

  // Iterate through each cell in the grid
  for (let r = 0; r < rows; r++) {
    for (let c = 0; c < cols; c++) {
      if (grid[r][c] === '1') {
        islandCount++;
        dfs(r, c);
      }
    }
  }

  return islandCount;
}

// Example usage:
const grid = [
  ['1', '1', '0', '0', '0'],
  ['0', '1', '0', '0', '1'],
  ['1', '0', '0', '1', '1'],
  ['0', '0', '0', '0', '0'],
  ['1', '0', '1', '0', '1']
];

console.log(numIslands(grid)); // Output: 5


// BFS 


function numIslands(grid) {
  if (!grid || grid.length === 0) return 0;

  const rows = grid.length;
  const cols = grid[0].length;

  // 8 directions (horizontal, vertical, diagonal)
  const directions = [
    [-1, 0],  // up
    [1, 0],   // down
    [0, -1],  // left
    [0, 1],   // right
    [-1, -1], // top-left
    [-1, 1],  // top-right
    [1, -1],  // bottom-left
    [1, 1]    // bottom-right
  ];

  let islandCount = 0;

  function bfs(r, c) {
    const queue = [];
    queue.push([r, c]);
    grid[r][c] = '0'; // mark as visited

    while (queue.length > 0) {
      const [row, col] = queue.shift();

      for (const [dr, dc] of directions) {
        const nr = row + dr;
        const nc = col + dc;

        if (
          nr >= 0 &&
          nr < rows &&
          nc >= 0 &&
          nc < cols &&
          grid[nr][nc] === '1'
        ) {
          queue.push([nr, nc]);
          grid[nr][nc] = '0'; // mark as visited
        }
      }
    }
  }

  for (let r = 0; r < rows; r++) {
    for (let c = 0; c < cols; c++) {
      if (grid[r][c] === '1') {
        islandCount++;
        bfs(r, c);
      }
    }
  }

  return islandCount;
}

// Example usage:
const grid = [
  ['1', '1', '0', '0', '0'],
  ['0', '1', '0', '0', '1'],
  ['1', '0', '0', '1', '1'],
  ['0', '0', '0', '0', '0'],
  ['1', '0', '1', '0', '1']
];

console.log(numIslands(grid)); // Output: 5
