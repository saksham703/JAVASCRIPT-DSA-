function addEdge(adj, s, t) {
    adj[s].push(t);
    adj[t].push(s);
}

// Recursive function for DFS traversal
function dfsRec(adj, visited, s, res) {
    visited[s] = true;
    res.push(s);

    // Recursively visit all adjacent vertices that are not visited yet
    for (let i of adj[s]) {
        if (!visited[i]) {
            dfsRec(adj, visited, i, res);
        }
    }
}

// Main DFS function to perform DFS for the entire graph
function DFS(adj) {
    let visited = new Array(adj.length).fill(false);
    let res = [];

    // Loop through all vertices to handle disconnected graphs
    for (let i = 0; i < adj.length; i++) {
        if (!visited[i]) {
            dfsRec(adj, visited, i, res);
        }
    }

    return res;
}

// Main Execution
let V = 6;
// Create an adjacency list for the graph
let adj = Array.from({ length: V }, () => []);

let edges = [[1, 2], [2, 0], [0, 3], [4, 5]];

// Populate the adjacency list with edges
for (let e of edges) {
    addEdge(adj, e[0], e[1]);
}

// Perform DFS
let res = DFS(adj);

// Print the DFS traversal result
console.log(res.join(" "));
